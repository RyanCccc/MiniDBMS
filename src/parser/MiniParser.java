/* Generated By:JavaCC: Do not edit this line. MiniParser.java */
        package parser;

        import java.util.*;
        import mysql.*;

        public class MiniParser implements MiniParserConstants {

// Grammar --------------------------------------------------------------------
  final public Command Command() throws ParseException {
        Command ret;
        ret = new Command();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_CREATE:
      jj_consume_token(KW_CREATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KW_TABLE:
        ret = createTable();
        break;
      case KW_USER:
        ret = createUser();
        break;
      case KW_SUBSCHEMA:
        ret = createSubschema();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case KW_DROP:
      ret = DropTable();
      break;
    case KW_SELECT:
      ret = Select();
      break;
    case KW_INSERT:
      ret = Insert();
      break;
    case KW_DELETE:
      jj_consume_token(KW_DELETE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KW_FROM:
        ret = delete();
        break;
      case KW_USER:
        ret = deleteUser();
        break;
      case KW_SUBSCHEMA:
        ret = deleteSubschema();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case KW_UPDATE:
      ret = Update();
      break;
    case KW_HELP:
      jj_consume_token(KW_HELP);
                    System.out.println("Help");
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(50);
    jj_consume_token(0);
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

//Create Subschema
  final public CreateSubschemaCommand createSubschema() throws ParseException {
        String tableName;
        List<String> attrNames = new ArrayList<String>();
        String attrName;
    jj_consume_token(KW_SUBSCHEMA);
    tableName = getTokenImage();
    attrName = getTokenImage();
                                           attrNames.add(attrName);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      jj_consume_token(51);
      attrName = getTokenImage();
                                               attrNames.add(attrName);
    }
          {if (true) return new CreateSubschemaCommand(tableName, attrNames);}
    throw new Error("Missing return statement in function");
  }

//Create User
  final public CreateUserCommand createUser() throws ParseException {
        System.out.println("Create User");

        String userName;
        User.Type userType;
    jj_consume_token(KW_USER);
    userName = getTokenWithCase();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_USERA:
      jj_consume_token(KW_USERA);
                               userType = User.Type.USER_A;
      break;
    case KW_USERB:
      jj_consume_token(KW_USERB);
                               userType = User.Type.USER_B;
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return new CreateUserCommand(userName, userType);}
    throw new Error("Missing return statement in function");
  }

//Create Table
  final public CreateTableCommand createTable() throws ParseException {
        System.out.println("Create Table");

        String tableName;
        List<Attribute> attributes = new ArrayList<Attribute>();
        List<String> primaryKeys = new ArrayList<String>();
        List<ForeignKey> foreignKeys = new ArrayList<ForeignKey>();

        Attribute attr;
        ForeignKey foreignKey;

        String name;
    jj_consume_token(KW_TABLE);
    tableName = getTokenImage();
    jj_consume_token(52);
    label_2:
    while (true) {
      attr = parseAttr();
      jj_consume_token(51);
                          attributes.add(attr);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(KW_PRIMARY);
    jj_consume_token(KW_KEY);
    jj_consume_token(52);
    name = getTokenImage();
                                                           primaryKeys.add(name);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(51);
      name = getTokenImage();
                                                               primaryKeys.add(name);
    }
    jj_consume_token(53);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(51);
      foreignKey = parseForeignKey();
                          foreignKeys.add(foreignKey);
    }
    jj_consume_token(53);
          {if (true) return new CreateTableCommand(tableName, attributes, primaryKeys, foreignKeys);}
    throw new Error("Missing return statement in function");
  }

  final public Attribute parseAttr() throws ParseException {
        String name;
        Attribute.Type type;
        int length = -1;
        String constraint = "";
    name = getTokenImage();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_INT:
      jj_consume_token(KW_INT);
                                     type = Attribute.Type.INT;
      break;
    case KW_CHAR:
      jj_consume_token(KW_CHAR);
      jj_consume_token(52);
      jj_consume_token(INT_LITERAL);
                                                          length=Integer.parseInt(token.image);
      jj_consume_token(53);
                          type = Attribute.Type.CHAR;
      break;
    case KW_DECIMAL:
      jj_consume_token(KW_DECIMAL);
                                         type = Attribute.Type.DECIMAL;
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_CHECK:
      jj_consume_token(KW_CHECK);
      jj_consume_token(52);
      constraint = Expression();
      jj_consume_token(53);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
          {if (true) return new Attribute(type, name, length, constraint);}
    throw new Error("Missing return statement in function");
  }

  final public ForeignKey parseForeignKey() throws ParseException {
        String refTableName;
        String localAttrName;
        String refAttrName;
    jj_consume_token(KW_FOREIGN);
    jj_consume_token(KW_KEY);
    jj_consume_token(52);
    localAttrName = getTokenImage();
    jj_consume_token(53);
    jj_consume_token(KW_REFERENCES);
    refTableName = getTokenImage();
    jj_consume_token(52);
    refAttrName = getTokenImage();
    jj_consume_token(53);
          {if (true) return new ForeignKey(refTableName, localAttrName, refAttrName);}
    throw new Error("Missing return statement in function");
  }

//Delete
  final public DeleteCommand delete() throws ParseException {
        String tableName;
        String condition = "";
    jj_consume_token(KW_FROM);
    tableName = getTokenImage();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_WHERE:
      jj_consume_token(KW_WHERE);
      condition = Expression();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
          {if (true) return new DeleteCommand(tableName, condition);}
    throw new Error("Missing return statement in function");
  }

//Delete User
  final public DeleteUserCommand deleteUser() throws ParseException {
        String userName;
    jj_consume_token(KW_USER);
    userName = getTokenWithCase();
          {if (true) return new DeleteUserCommand(userName);}
    throw new Error("Missing return statement in function");
  }

//Delete subschema
  final public DeleteSubschemaCommand deleteSubschema() throws ParseException {
        String tableName;
    jj_consume_token(KW_SUBSCHEMA);
    tableName = getTokenImage();
          {if (true) return new DeleteSubschemaCommand(tableName);}
    throw new Error("Missing return statement in function");
  }

//Drop table
  final public DropTableCommand DropTable() throws ParseException {
  String tableName;
    jj_consume_token(KW_DROP);
    jj_consume_token(KW_TABLE);
    tableName = getTokenImage();
          {if (true) return new DropTableCommand(tableName);}
    throw new Error("Missing return statement in function");
  }

//Select statement
  final public SelectCommand Select() throws ParseException {
        List<String> attrNames = null;
        List<String> tables = new ArrayList<String>();
        String condition = "";

        String name;
    jj_consume_token(KW_SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      name = getTokenImage();
                                        attrNames = new ArrayList<String>();
                                        attrNames.add(name);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 51:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        jj_consume_token(51);
        name = getTokenImage();
                                                           attrNames.add(name);
      }
      break;
    case SYM_STAR:
      jj_consume_token(SYM_STAR);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(KW_FROM);
    name = getTokenImage();
                                       tables.add(name);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      jj_consume_token(51);
      name = getTokenImage();
                                           tables.add(name);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_WHERE:
      jj_consume_token(KW_WHERE);
      condition = Expression();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
          {if (true) return new SelectCommand(attrNames, tables, condition);}
    throw new Error("Missing return statement in function");
  }

//Insert into table
  final public InsertCommand Insert() throws ParseException {
        String tableName;
        List<Value> values = new ArrayList<Value>();

        Value value;
    jj_consume_token(KW_INSERT);
    jj_consume_token(KW_INTO);
    tableName = getTokenImage();
    jj_consume_token(KW_VALUES);
    jj_consume_token(52);
    value = getValue();
                                   values.add(value);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
      jj_consume_token(51);
      value = getValue();
                                       values.add(value);
    }
    jj_consume_token(53);
          {if (true) return new InsertCommand(tableName, values);}
    throw new Error("Missing return statement in function");
  }

//Update values
  final public UpdateCommand Update() throws ParseException {
        String tableName;
        List<AttributeAssign> attrAssgs = new ArrayList<AttributeAssign>();
        String condition = "";
        AttributeAssign attrAssg;
    jj_consume_token(KW_UPDATE);
    tableName = getTokenImage();
    jj_consume_token(KW_SET);
    attrAssg = AttributeAssg();
                                                      attrAssgs.add(attrAssg);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_8;
      }
      jj_consume_token(51);
      attrAssg = AttributeAssg();
                                               attrAssgs.add(attrAssg);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_WHERE:
      jj_consume_token(KW_WHERE);
      condition = Expression();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
          {if (true) return new UpdateCommand(tableName, attrAssgs, condition);}
    throw new Error("Missing return statement in function");
  }

  final public AttributeAssign AttributeAssg() throws ParseException {
        String attrName;
        Value value;
    attrName = getTokenImage();
    jj_consume_token(SYM_EQUAL);
    value = getValue();
          {if (true) return new AttributeAssign(attrName, value);}
    throw new Error("Missing return statement in function");
  }

  final public Value getValue() throws ParseException {
  Attribute.Type type;
  String val;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_LITERAL:
      jj_consume_token(INT_LITERAL);
                type = Attribute.Type.INT;
                val = token.image;
      break;
    case DECIMAL_LITERAL:
      jj_consume_token(DECIMAL_LITERAL);
                type = Attribute.Type.DECIMAL;
                val = token.image;
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
                type = Attribute.Type.CHAR;
                val = token.image;
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return new Value(type, val);}
    throw new Error("Missing return statement in function");
  }

// Expression
  final public String Expression() throws ParseException {
  String exp;
    exp = getSingleExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KW_AND:
      case KW_OR:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KW_AND:
        jj_consume_token(KW_AND);
          exp += " && ";
          exp += getSingleExpression();
        break;
      case KW_OR:
        jj_consume_token(KW_OR);
          exp += " || ";
          exp += getSingleExpression();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public String getSingleExpression() throws ParseException {
  String exp = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 52:
      jj_consume_token(52);
                exp += "(";
                exp += getTokenImage();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYM_PLUS:
        jj_consume_token(SYM_PLUS);
        break;
      case SYM_MINUS:
        jj_consume_token(SYM_MINUS);
        break;
      case SYM_STAR:
        jj_consume_token(SYM_STAR);
        break;
      case SYM_SLASH:
        jj_consume_token(SYM_SLASH);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                exp += token.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_LITERAL:
        jj_consume_token(INT_LITERAL);
        break;
      case DECIMAL_LITERAL:
        jj_consume_token(DECIMAL_LITERAL);
        break;
      case STRING_LITERAL:
        jj_consume_token(STRING_LITERAL);
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        exp += token.image;
      jj_consume_token(53);
                exp += ")";
      break;
    default:
      jj_la1[23] = jj_gen;
                        exp += getTokenImage();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYM_EQUAL:
      jj_consume_token(SYM_EQUAL);
          exp += "=";
      break;
    case SYM_EXCLEQUAL:
      jj_consume_token(SYM_EXCLEQUAL);
      break;
    case SYM_LESS:
      jj_consume_token(SYM_LESS);
      break;
    case SYM_MORE:
      jj_consume_token(SYM_MORE);
      break;
    case SYM_LESSEQUAL:
      jj_consume_token(SYM_LESSEQUAL);
      break;
    case SYM_MOREEQUAL:
      jj_consume_token(SYM_MOREEQUAL);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          exp += token.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_LITERAL:
      jj_consume_token(INT_LITERAL);
      break;
    case DECIMAL_LITERAL:
      jj_consume_token(DECIMAL_LITERAL);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    exp += token.image;
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

//Utility
  final public String getTokenImage() throws ParseException {
    jj_consume_token(IDENTIFIER);
          {if (true) return token.image.toUpperCase();}
    throw new Error("Missing return statement in function");
  }

  final public String getTokenWithCase() throws ParseException {
    jj_consume_token(IDENTIFIER);
          {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public MiniParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20008000,0x20020000,0x2c94100,0x0,0xc0000000,0x0,0x0,0x0,0x0,0x200,0x40000,0x0,0x0,0x0,0x40000,0x0,0x0,0x40000,0x0,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1,0x1,0x0,0x80000,0x0,0x4000,0x80000,0x80000,0xe,0x0,0x0,0x80000,0x4040,0x80000,0x0,0x80000,0x80000,0x0,0x38000,0x0,0x0,0xf0,0x3c000,0x100000,0x3f00,0x3c000,};
   }

  /** Constructor with InputStream. */
  public MiniParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MiniParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new MiniParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MiniParser(MiniParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MiniParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[54];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

        }
